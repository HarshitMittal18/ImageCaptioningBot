# -*- coding: utf-8 -*-
"""Caption_it.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10PXf-uQ7qfUKhcYRI0EAp7a4KvI_1q-t
"""

from tensorflow.keras.models import Model,load_model
from tensorflow.keras.applications.resnet50 import ResNet50,preprocess_input
from tensorflow.keras.preprocessing import image
import numpy as np
from tensorflow.keras.preprocessing.sequence import pad_sequences
import pickle

model = load_model("model_weights/model_9.h5")
model._make_predict_function()

model_temp = ResNet50(weights="imagenet",input_shape=(224,224,3))


model_resnet = Model(model_temp.input,model_temp.layers[-2].output)
model_resnet._make_predict_function()

def preprocess_img(img):
    img = image.load_img(img,target_size=(224,224))
    img = image.img_to_array(img)
    # When we feed an image to the model we feed in certain batch
    # So we need a shape (batch_size,224,224,3)
    # A 4D Tensor
    # Expand_dims will by default make the default batch size as 1
    img = np.expand_dims(img,axis=0)
    # Normalization
    # Done by subtracting mean of a channel from each pixel
    img = preprocess_input(img)
    return img

def encode_image(img):
    img = preprocess_img(img)
    feature_vector = model_resnet.predict(img)
    feature_vector = feature_vector.reshape((1,feature_vector.shape[1]))

    #print(feature_vector.shape)
    return feature_vector

with open("word_to_idx.pkl",'rb') as wb1:
  word_to_idx = pickle.load(wb1)
with open("idx_to_word.pkl",'rb') as wb2:
  idx_to_word = pickle.load(wb2)

def predict_captions(photo):

  in_text = "startseq"
  max_len = 35
  for i in range(max_len):
    sequence = [word_to_idx[w] for w in in_text.split() if w in word_to_idx]
    sequence = pad_sequences([sequence],maxlen = max_len ,padding = "post")

    ypred = model.predict([photo,sequence])
    # Taking the word with max probablity - Greedy Sampling
    # Beam Search - Allows to pick top 3 words
    ypred = ypred.argmax()
    word = idx_to_word[ypred]
    in_text += (" " + word)

    if word == "endseq":
      break
  final_caption = in_text.split()[1:-1]
  final_caption = " ".join(final_caption)

  return final_caption

def caption_this_image(image):
  enc = encode_image(image)
  caption = predict_captions(enc)
  return caption

# predict_captions(enc)

